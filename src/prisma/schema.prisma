generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  SUPERADMIN
  USER
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MediaType {
  IMAGE
  VIDEO
  TEXT
}


model Account {
  id                 String  @id @default(cuid())
  user_id             String  @map("user_id")
  type               String
  provider           String
  providerAccount_id  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccount_id])
  @@map("accounts")
}

model User {
  id            String      @id @default(cuid())
  name          String
  country       String?
  state         String?
  phonenumber   String?
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  role          UserRole    @default(USER)
  password      String?
  accounts      Account[]
  posts         Post[]      
  comments      Comment[]   
  sentRequests  Request[]   @relation("SentRequests")  
  receivedRequests Request[] @relation("ReceivedRequests")  
  friendships   Friend[]    @relation("UserFriendship")   
  taggedPosts   PostTag[]   

  @@map("users")
}

model Post {
  id          String     @id @default(cuid())
  type        String
  desc        String
  posted_by   User       @relation(fields: [posted_by_id], references: [id])
  posted_by_id String
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  comments    Comment[]  
  tags        PostTag[]  
  media       Media[]

  @@map("posts")
}

model Comment {
  id          String   @id @default(cuid())
  content     String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  post        Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id     String
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String

  @@map("comments")
}

model VerificationToken {
  id            String   @id @default(cuid())
  email         String   @unique
  token         String   @unique
  expires       DateTime

  @@unique([email, token])
  @@map("verificationtokens")
}

model Friend {
  id           String   @id @default(cuid())
  user_id       String
  friend_id     String
  created_at    DateTime @default(now())

  friend       User     @relation("UserFriendship", fields: [friend_id], references: [id], onDelete: Cascade)

  @@unique([user_id, friend_id])
  @@map("friends")
}

model Request {
  id           String   @id @default(cuid())
  sender_id     String
  receiver_id   String
  status       RequestStatus @default(PENDING)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  sender       User     @relation("SentRequests", fields: [sender_id], references: [id], onDelete: Cascade)
  receiver     User     @relation("ReceivedRequests", fields: [receiver_id], references: [id], onDelete: Cascade)

  @@unique([sender_id, receiver_id])
  @@map("requests")
}


model PostTag {
  id       String   @id @default(cuid())
  post_id   String
  user_id   String
  created_at DateTime @default(now())

  post     Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([post_id, user_id])
  @@map("post_tags")
}


model Media {
  id            String   @id @default(cuid())
  media_type    MediaType   
  post_id       String
  media_link    String
  
  post          Post    @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@map("media")
}